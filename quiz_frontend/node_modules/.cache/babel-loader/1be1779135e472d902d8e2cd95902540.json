{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nconst useAxiosForQuestions = _ref => {\n  _s();\n\n  let {\n    url\n  } = _ref;\n  const [questionresponse, setQuestionResponse] = useState(null); //   const [error, setError] = useState(\"\");\n  //   const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios.get(url).then(res => setQuestionResponse(res.data)).catch(err => setError(err)).finally(() => setLoading(false));\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    questionresponse\n  };\n};\n\n_s(useAxiosForQuestions, \"QiFGF0BX/K34BENFyTNu2cw/AcI=\");\n\nexport default useAxiosForQuestions;","map":{"version":3,"sources":["/var/www/html/QuizApplication/frontend/src/Hooks/useAxiosForQuestion.js"],"names":["axios","useEffect","useState","defaults","baseURL","useAxiosForQuestions","url","questionresponse","setQuestionResponse","fetchData","get","then","res","data","catch","err","setError","finally","setLoading"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,MAAMC,oBAAoB,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AACxC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAC,IAAD,CAAxD,CADwC,CAE1C;AACA;;AAEED,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,SAAS,GAAG,MAAM;AACtBT,MAAAA,KAAK,CACFU,GADH,CACOJ,GADP,EAEGK,IAFH,CAESC,GAAD,IAASJ,mBAAmB,CAACI,GAAG,CAACC,IAAL,CAFpC,EAGGC,KAHH,CAGUC,GAAD,IAASC,QAAQ,CAACD,GAAD,CAH1B,EAIGE,OAJH,CAIW,MAAMC,UAAU,CAAC,KAAD,CAJ3B;AAKD,KAND;;AAOAT,IAAAA,SAAS;AACV,GATQ,EASN,CAACH,GAAD,CATM,CAAT;AAWA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAjBD;;GAAMF,oB;;AAmBN,eAAeA,oBAAf","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nconst useAxiosForQuestions = ({ url }) => {\n  const [questionresponse, setQuestionResponse] = useState(null);\n//   const [error, setError] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios\n        .get(url)\n        .then((res) => setQuestionResponse(res.data))\n        .catch((err) => setError(err))\n        .finally(() => setLoading(false));\n    };\n    fetchData();\n  }, [url]);\n\n  return { questionresponse };\n};\n\nexport default useAxiosForQuestions;"]},"metadata":{},"sourceType":"module"}